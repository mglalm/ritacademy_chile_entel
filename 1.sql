-- Ericsson Software Inc. 2001-2012

-- DATABASE UPGRADE SCRIPT OF CW FROM PRODUCT NO 20150818 TO PRODUCT NO 20160224
-- DATABASE UPGRADE SCRIPT OF CW TO COMPATIBLE PRODUCT NO 20140910
-- DATABASE UPGRADE SCRIPT OF api_common. PRODUCT NO 20130410
-- DATABASE UPGRADE SCRIPT OF cwl_security. PRODUCT NO 20120817
-- DATABASE UPGRADE SCRIPT OF cwl_config. PRODUCT NO 20131210
-- DATABASE UPGRADE SCRIPT OF cwt_common5. PRODUCT NO 20130315
-- DATABASE UPGRADE SCRIPT OF cwl_ims. PRODUCT NO 20130319


-- ATTENTION: THIS SCRIPT HAS TO BE EXAMINED BY DATABASE ADMINISTRATOR!
--            IT MAY NOT CONTAIN ALL NEEDED PARAMETERS.
--            MODIFY THE SCRIPT TO SPECIFY PROPER TABLESPACE AND STORAGE CLAUSES

-- Generated by Ericsson Service Designer on Mon Apr 24 14:19:06 ART 2017


-- THE FOLLOWING STATEMENTS APPLY TO 'c##train:orcl@localhost' DATABASE ------------------------------- 


define DEFAULT_TABLESPACE_TABLE = USERS;
define DEFAULT_TABLESPACE_INDEX = USERS;
define PE_TABLESPACE_TABLE = USERS;
define PE_TABLESPACE_INDEX = USERS;

--The column APP_NAME was missed in previous update
DECLARE
  v_column_exists NUMBER := 0;  
BEGIN
  SELECT count(*) INTO v_column_exists
    FROM user_tab_cols
    WHERE table_name = 'CWDBCODETABLES'
      AND column_name = 'APP_NAME';
  IF (v_column_exists = 0) THEN
      EXECUTE IMMEDIATE 'ALTER TABLE CWDBCODETABLES ADD APP_NAME VARCHAR2(32)';
  END IF;
END;
/


--Delete the tasks associated with the process which was terminated
CREATE OR REPLACE PROCEDURE UPDATE_PROCESS_ACTIVE(procId in NUMBER, procType in NUMBER, tabNum in NUMBER, oldStat in NUMBER, newStat in NUMBER)
AS
    BEGIN
      IF newStat IN (1) THEN
        UPDATE CWPWORKLIST SET DISABLE = 0 WHERE SENDER_ID = procId AND SENDER_TYPE = procType;
      ELSE
        IF newStat IN (2,5) THEN  
			     --Error,Suspended
           UPDATE CWPWORKLIST SET DISABLE = 1 WHERE SENDER_ID = procId AND SENDER_TYPE = procType;
        ELSIF newStat=6 THEN
           DELETE FROM CWPWORKLIST WHERE SENDER_ID = procId;
        END IF;     
    END IF;
END;
/

-- Convert decimal number to base64, used by function INSERT_TRANSTXT to generate translation id
CREATE OR REPLACE FUNCTION to_base64 (p_dec IN NUMBER)
   RETURN VARCHAR2
IS
   l_str   VARCHAR2 (255) DEFAULT NULL;
   l_num   NUMBER         DEFAULT p_dec;
   l_base64   VARCHAR2 (64)  DEFAULT '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~.';
BEGIN
   IF (p_dec IS NULL)
   THEN
      RETURN NULL;
   END IF;

   IF (TRUNC (p_dec) <> p_dec OR p_dec < 0)
   THEN
      RAISE PROGRAM_ERROR;
   END IF;

   LOOP
      l_str := SUBSTR (l_base64, MOD (l_num, 64) + 1, 1) || l_str;
      l_num := TRUNC (l_num / 64);
      EXIT WHEN (l_num = 0);
   END LOOP;

   RETURN l_str;
END to_base64;
/

-- Create the translation codes and return translation id in base64 format
create or replace FUNCTION INSERT_TRANSTXT (transTx IN VARCHAR2)
	RETURN VARCHAR2
IS
  	v_id VARCHAR2(10);
    trans_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO trans_count FROM cwtranslations where translation = transTx and language = 'en-xx' AND ROWNUM = 1;
  if trans_count < 1 then
    INSERT INTO cwtranslations (id, language, lastupdateddate, translation)
	VALUES (to_base64(CWTRANSLATIONSEQ.NEXTVAL), 'en-xx', TO_DATE(SYSDATE), NVL(transTx, '-'))
	returning id into v_id;

  else
    select id into v_id from cwtranslations where translation = transTx AND ROWNUM = 1;
  end if;
  RETURN v_id;
END;
/

--Used by trigger deleteCode and to function DELETE_TRANSLATION to parse translationIdList
create or replace FUNCTION get_token(
    p_input_string IN VARCHAR2,            -- input string
    p_token_number IN PLS_INTEGER,         -- token number
    p_delimiter    IN VARCHAR2 DEFAULT ',' -- separator character
  )
  RETURN VARCHAR2
IS
  v_temp_string VARCHAR2(32767) := p_delimiter || p_input_string ;
  v_pos1 PLS_INTEGER ;
  v_pos2 PLS_INTEGER ;
BEGIN
  v_pos1     := INSTR( v_temp_string, p_delimiter, 1, p_token_number ) ;
  IF v_pos1   > 0 THEN
    v_pos2   := INSTR( v_temp_string, p_delimiter, 1, p_token_number + 1) ;
    IF v_pos2 = 0 THEN
      v_pos2 := LENGTH( v_temp_string ) + 1 ;
    END IF ;
    RETURN( SUBSTR( v_temp_string, v_pos1+1, v_pos2 - v_pos1-1 ) ) ;
  ELSE
    RETURN NULL ;
  END IF ;
EXCEPTION
  WHEN OTHERS THEN
    RAISE;      
END get_token;
/

--Used by trigger deleteCode
create or replace PROCEDURE DELETE_TRANSLATION (transIdList in CLOB) 
AS
	vCount NUMBER(10) := 0;
	transId VARCHAR2(10);
	i NUMBER(10) := 1;
BEGIN 
	LOOP
        vCount := 0;
        transId := get_token(transIdList, i , '|') ;
        EXIT WHEN transId IS NULL ;
        SELECT count(*) INTO vCount FROM CWDBCODETABLES WHERE DESCRIPTION = transId; 
        IF vCount <= 0 THEN --DO NOT DELETE TRANSLATION IF IT IS BEING USED IN CODETABLE
          delete from cwtranslations where id = transId;
        END IF;
        i := i + 1 ;
	END LOOP;      
END;
/

--Use compound trigger to avoid mutating table error
--Call DELETE_TRANSLATION() to make sure translation is not used by other codes before deletion
CREATE or REPLACE TRIGGER deleteCode 
	FOR DELETE ON cwdbcodetables
COMPOUND TRIGGER 
    transId VARCHAR2(10);
	transIdListStr CLOB;
  AFTER EACH ROW IS
  BEGIN
  IF transIdListStr IS NULL THEN
    transIdListStr := :old.description;
  ELSE
    transIdListStr := transIdListStr || '|' || :old.description;
  END IF;
  END AFTER EACH ROW;
  
  AFTER STATEMENT IS  
  BEGIN
  IF transIdListStr IS NOT NULL THEN
    DELETE_TRANSLATION(transIdListStr);
  END IF;
  END AFTER STATEMENT;
END deleteCode;
/

-- change max value for CWAUDITTRAILSEQ
ALTER SEQUENCE CWAUDITTRAILSEQ
   MAXVALUE 9999999999999999;
/

-- add extra column avm_id to cwcacheidlist, and delete record when archiving avm
TRUNCATE TABLE CWCACHEIDLIST;
ALTER TABLE CWCACHEIDLIST DROP CONSTRAINT CWPK_CWCACHEIDLIST CASCADE DROP INDEX;
ALTER TABLE CWCACHEIDLIST
ADD (
	AVM_ID NUMBER(8),
	CONSTRAINT CWPK_CWCACHEIDLIST PRIMARY KEY (CACHE_NAME,AVM_ID,AVM_NODE_ID) USING INDEX
	(CREATE UNIQUE INDEX CWPK_CWCACHEIDLIST ON CWCACHEIDLIST(CACHE_NAME,AVM_ID,AVM_NODE_ID) TABLESPACE &DEFAULT_TABLESPACE_INDEX)
);

DROP TRIGGER CWVMINFODEL;
CREATE OR REPLACE TRIGGER CWVMINFODEL AFTER
    DELETE
    ON CWVMINFO
    FOR EACH ROW
    BEGIN
	  INSERT INTO CWVMINFOARCHIVE (PE_ID,HOST,IP,STARTTIME,TOTALMEMORY,STATUS,NUMBERPROCESSES,PE_MODE,JMXPORT,CW_PORT,BUCKET_NO,END_TIME,NODE_ID,NODE_MODE,AVM_ID,APP_NAME,CONFIG_NODE)
	  	VALUES (:old.PE_ID,:old.HOST,:old.IP,:old.STARTTIME,:old.TOTALMEMORY,:old.STATUS,:old.NUMBERPROCESSES,:old.PE_MODE,:old.JMXPORT,:old.CW_PORT,:old.BUCKET_NO,:old.END_TIME,:old.NODE_ID,:old.NODE_MODE,:old.AVM_ID,:old.APP_NAME,:old.CONFIG_NODE);
      UPDATE CWGLOBALPROCESS SET STATUS=4 WHERE AVM_ID = :old.AVM_ID and :old.status = 1;
	  UPDATE CWGLOBALPROCESS SET AVM_ID = NULL WHERE AVM_ID = :old.AVM_ID;
	  DELETE FROM CWPGLOBAL WHERE AVM_ID = :old.AVM_ID;
	  DELETE FROM CWCACHEIDLIST WHERE AVM_ID = :old.AVM_ID;
	  
    END;
/

CREATE OR REPLACE PROCEDURE INSERTPARTICIPANTSMESSAGE (
  docType IN NUMBER,
  sender IN NUMBER,
  senderType IN NUMBER,
  orderId IN VARCHAR2,
  operation IN VARCHAR2,
  data IN NCLOB,
  consumer IN NUMBER,
  creationDate IN DATE,
  activity IN NUMBER,
  serializationId IN NUMBER,
  userData IN VARCHAR2,
  earliestConsumeTime IN DATE,
  priority IN NUMBER,
  senderBucketNo IN NUMBER,
  useNewTable IN NUMBER, -- 0 for insertion into active table, 1 for insertion into new table
  pmsgId OUT NUMBER)
AS
  stat NUMBER(1);
  tableName VARCHAR2(50);
  bucketsNo NUMBER;
BEGIN
  bucketsNo:=GET_MAX_BUCKET_NO();
    IF consumer > 250000 THEN -- this is a real process number, not a global process type
        IF consumer < 5000000000000000 THEN
            --execute immediate 'SELECT STATUS FROM CWPROCESS WHERE PROCESS_ID=' || consumer INTO stat;
            EXECUTE IMMEDIATE
              'SELECT STATUS FROM CWPROCESS_ACTIVE' || (serializationId MOD bucketsNo) || ' WHERE PROCESS_ID = :procId'
              || ' UNION ALL SELECT STATUS FROM CWPROCESS_NEW' || (serializationId MOD bucketsNo) || ' WHERE PROCESS_ID = :procId'
            INTO stat
            USING consumer, consumer;

        ELSE
            SELECT STATUS INTO stat FROM CWGLOBALPROCESS WHERE PROCESS_ID=consumer;
        END IF;
        IF stat = 3 or stat = 6 THEN -- If the process is completed or terminated the message is ignored
            pmsgId := 0; -- indicates that the process is completed (or terminated)
            RETURN;
        END IF;
    END IF;

   	IF consumer < 250000 or consumer > 5000000000000000 then
      tableName := 'CWPPARTICIPANT_GLOBAL_';
    else
      tableName := 'CWPPARTICIPANT_';
    end if;
	
    IF useNewTable > 0 THEN
      tableName := tableName || 'NEW';
    ELSE
      tableName := tableName || 'ACTIVE';
    END IF;
    tableName :=  tableName || (serializationId MOD bucketsNo);

    EXECUTE IMMEDIATE
       'INSERT INTO ' || tableName || ' (MSGID,DOC_TYPE,SENDER_ID,SENDER_TYPE,ORDER_ID,
        OPERATION,DOC,CONSUMER_ID,CREATION_DATE,ACTIVITY_INDEX,SERIALIZATION_ID,USER_DATA, EARLIEST_CONSUME_TIME, PRIORITY, SENDER_BUCKET_NO)
        VALUES(CWPARTICIPANTSEQ.NEXTVAL,
        :docType, :sender, :senderType, :orderId, :operation, :data, :consumer, :creationDate, :activity,
        :serializationId, :userData, :earliestConsumeTime, :priority, :senderBucketNo)
        RETURNING MSGID INTO :pmsgId'
    USING docType, sender, senderType, orderId, operation, data, consumer, creationDate, activity,
          serializationId, userData, earliestConsumeTime, priority, senderBucketNo, OUT pmsgId;
EXCEPTION
   WHEN NO_DATA_FOUND THEN  BEGIN
        IF consumer < 5000000000000000 THEN
           SELECT STATUS INTO stat FROM CWPROCESS_COMPLETED WHERE PROCESS_ID=consumer;
           IF stat = 3 or stat = 6 THEN
              pmsgId := 0; -- indicates that the process is completed (or terminated)
              RETURN;
           END IF;
        END IF;
        pmsgId := -1; -- the process is not found
   END;     
END;
/







UPDATE CWPRODUCTPROPERTIES SET NVALUE=20160224 WHERE ID='CW';
UPDATE CWPRODUCTPROPERTIES SET NVALUE=20140910 WHERE ID='CW:compatible';

COMMIT;


-- Generated by Ericsson Service Designer on Mon Apr 24 14:19:06 ART 2017

